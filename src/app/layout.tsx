import type { Metadata } from 'next';
import { Urbanist } from 'next/font/google';
import './globals.css';
import { cn } from '@/lib/utils';
import Navbar from '@/components/Navbar';
import Providers from '@/components/Providers';
import { Toaster } from '@/components/ui/toaster';
import 'simplebar-react/dist/simplebar.min.css';
import AppNavbar from '@/components/NavigationBar';
import { Suspense } from 'react';

const urbanist = Urbanist({ subsets: ['latin'] });

if (typeof Promise.withResolvers === 'undefined') {
  // @ts-expect-error This does not exist outside of polyfill which this is doing
  global.Promise.withResolvers = function () {
    let resolve, reject;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    return { promise, resolve, reject };
  };
}

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang='en' className='dark'>
      <Providers>
        <body
          className={cn(
            'min-h-screen dark:bg-gray-900',
            urbanist.className,
            'sans-serif'
          )}
        >
          {true ? <AppNavbar /> : <Navbar />}
          <Toaster />
          <Suspense fallback={null}>{children}</Suspense>
        </body>
      </Providers>
    </html>
  );
}
