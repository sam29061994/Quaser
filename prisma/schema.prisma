// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum FileStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model User {
  id      String    @id @unique //matches kinde user id
  email   String    @unique
  file    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model File {
  id     String     @id @default(uuid())
  name   String
  status FileStatus

  url      String
  key      String
  messages String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  Message   Message[]
}

model Message {
  id            String   @id @default(uuid())
  content       String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isUserMessage Boolean
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  fileId        String?
  file          File?    @relation(fields: [fileId], references: [id])
}
